package com.tigerbird1.TpFCargoCalc.ui;

import com.tigerbird1.TpFCargoCalc.io.CargoTypes;

import javax.swing.*;
import javax.swing.tree.*;
import java.awt.*;

public class CargoCalcUI {
	private JPanel panel;
	private JTextField frequency;
	private JTextField capacity;
	private JButton addLeg;
	private JButton addCity;
	private JSlider nVehicles;
	private JTree legs;
	private JLabel nVehiclesLabel;
	private JComboBox<String> cargoTypesChooser;
	private JButton moveItemU;
	private JButton moveItemD;

	private DefaultComboBoxModel<String> cargoTypesModel;
	private DefaultMutableTreeNode root = new DefaultMutableTreeNode("Root");
	private DefaultTreeModel treeModel;

	private CargoTypes cargoTypes;

	public CargoCalcUI() {
		$$$setupUI$$$();
		addLeg.addActionListener(e -> {
			addObject(getLegString());
			treeModel.reload();
		});
	}

	private void createUIComponents() {
		cargoTypesModel = new DefaultComboBoxModel<>();
		cargoTypesChooser = new JComboBox<>(cargoTypesModel);
		treeModel = new DefaultTreeModel(root);
		legs = new JTree(treeModel);
		legs.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		legs.setEditable(true);

	}

	public DefaultMutableTreeNode addObject(Object child) {
		DefaultMutableTreeNode parentNode = null;
		TreePath parentPath = legs.getSelectionPath();

		if (parentPath == null) {
			parentNode = root;
		} //There is no selection. Default to the root node.
		else {
			parentNode = (DefaultMutableTreeNode) ( parentPath.getLastPathComponent() );
		}

		return addObject(parentNode, child, true);
	}

	public DefaultMutableTreeNode addObject(DefaultMutableTreeNode parent, Object child, boolean shouldBeVisible) {
		DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);
		treeModel.insertNodeInto(childNode, parent, parent.getChildCount());

		//Make sure the user can see the lovely new node.
		if (shouldBeVisible) {
			legs.scrollPathToVisible(new TreePath(childNode.getPath()));
		}
		return childNode;
	}

	private String getLegString() {
		String cap = capacity.getText();
		String freq = getFrequency();
		String nVehicles = String.valueOf(this.nVehicles.getValue());

		return cap + ':' + freq + ':' + nVehicles;
	}

	private String getFrequency() {
		String text = frequency.getText();
		String[] tmp = text.split(":");
		int minutes = Integer.valueOf(tmp[0]);
		int seconds = Integer.valueOf(tmp[1]) + minutes * 60;
		return String.valueOf(seconds);
	}

	public void setCargoTypes(CargoTypes types) {
		cargoTypes = types;
		for (String type : cargoTypes.getCargoTypes()) {
			this.cargoTypesModel.addElement(type);
		}
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		panel = new JPanel();
		panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 6, new Insets(0, 0, 0, 0), -1, -1));
		panel.putClientProperty("html.disable", Boolean.TRUE);
		capacity = new JTextField();
		capacity.setText("1.0");
		capacity.putClientProperty("html.disable", Boolean.TRUE);
		panel.add(capacity, new com.intellij.uiDesigner.core.GridConstraints(4, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		addCity = new JButton();
		addCity.setText("+ City");
		addCity.setToolTipText("Add City");
		panel.add(addCity, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Capacity");
		label1.putClientProperty("html.disable", Boolean.TRUE);
		panel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(3, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		legs.setAutoscrolls(true);
		legs.setDragEnabled(true);
		legs.setDropMode(DropMode.INSERT);
		legs.setEditable(true);
		legs.setEnabled(true);
		legs.setRootVisible(true);
		legs.setShowsRootHandles(true);
		legs.setToolTipText("Legs");
		legs.setVisible(true);
		legs.putClientProperty("JTree.lineStyle", "dashed");
		legs.putClientProperty("html.disable", Boolean.TRUE);
		panel.add(legs, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 3, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Frequency (mins:secs)");
		panel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(3, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		frequency = new JTextField();
		frequency.setText("0:1");
		frequency.putClientProperty("html.disable", Boolean.TRUE);
		panel.add(frequency, new com.intellij.uiDesigner.core.GridConstraints(4, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		nVehiclesLabel = new JLabel();
		nVehiclesLabel.setText("Vehicle(s): ");
		panel.add(nVehiclesLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		nVehicles = new JSlider();
		nVehicles.setExtent(0);
		nVehicles.setInverted(false);
		nVehicles.setMajorTickSpacing(16);
		nVehicles.setMaximum(80);
		nVehicles.setMinimum(1);
		nVehicles.setMinorTickSpacing(4);
		nVehicles.setPaintLabels(false);
		nVehicles.setPaintTicks(true);
		nVehicles.setPaintTrack(true);
		nVehicles.setSnapToTicks(false);
		nVehicles.setValue(1);
		nVehicles.setValueIsAdjusting(false);
		nVehicles.putClientProperty("JSlider.isFilled", Boolean.FALSE);
		nVehicles.putClientProperty("Slider.paintThumbArrowShape", Boolean.TRUE);
		nVehicles.putClientProperty("html.disable", Boolean.TRUE);
		panel.add(nVehicles, new com.intellij.uiDesigner.core.GridConstraints(4, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		addLeg = new JButton();
		addLeg.setText("+ Leg");
		addLeg.setToolTipText("Add leg");
		panel.add(addLeg, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
		panel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		panel.add(cargoTypesChooser, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		moveItemU = new JButton();
		moveItemU.setText("Move up");
		panel.add(moveItemU, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
		panel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		moveItemD = new JButton();
		moveItemD.setText("Move down");
		panel.add(moveItemD, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel;
	}

	public void setVisible(boolean flag) {
		panel.setVisible(flag);
	}
}
